<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>依赖注入&amp;loc控制反转容器</title>
    <url>/2018/07/DI-loc-Container.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Laravel框架的基 础是一个功能强大的控制反转容器（IoC container）。 为了真正理解本框架，需要好好掌握该容器。但我们要搞清楚，控制反转容器只是一种用于方便实现“依赖注入”的工具。要实现依赖注入并不一定需要控制反转容器，只是用容器会更方便和容易一点儿。 --「<a href="https://my.oschina.net/zgldh/blog/389246">从百草园到三味书屋 “From Apprentice To Artisan”</a>」</p>

</blockquote>
<span id="more"></span>
<p><code>依赖注入</code> 方便控制器与逻辑层解耦<br />
<code>loc容器</code> 使 <code>依赖注入</code> 便于管理</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>两数相加</title>
    <url>/2018/06/add-two-numbers.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">说明：342 + 465 = 807</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode *p = l1, *q = l2, *curr = dummyHead;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p || q || carry) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p) &#123;</span><br><span class="line">                carry += p-&gt;val;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (q) &#123;</span><br><span class="line">                carry += q-&gt;val;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            curr-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(carry % <span class="number">10</span>);</span><br><span class="line">            carry /= <span class="number">10</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>亲密字符串</title>
    <url>/2018/08/buddy-strings.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定两个由小写字母构成的字符串 A 和 B ，只要我们可以通过交换 A 中的两个字母得到与 B 相等的结果，就返回 true ；否则返回 false 。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： A = &quot;ab&quot;, B = &quot;ba&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： A = &quot;ab&quot;, B = &quot;ab&quot;</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： A = &quot;aa&quot;, B = &quot;aa&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>
<h5 id="示例-4"><a class="markdownIt-Anchor" href="#示例-4"></a> 示例 4：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： A = &quot;aaaaaaabc&quot;, B = &quot;aaaaaaacb&quot;</span><br><span class="line">输出： true</span><br></pre></td></tr></table></figure>
<h5 id="示例-5"><a class="markdownIt-Anchor" href="#示例-5"></a> 示例 5：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： A = &quot;&quot;, B = &quot;aa&quot;</span><br><span class="line">输出： false</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">buddyStrings</span><span class="params">(string A, string B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (A == B) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); ++i)</span><br><span class="line">                count[A[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c: count)</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> first = <span class="number">-1</span>, second = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i] != B[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (first == <span class="number">-1</span>)</span><br><span class="line">                        first = i;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (second == <span class="number">-1</span>)</span><br><span class="line">                        second = i;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (second != <span class="number">-1</span> &amp;&amp; A[first] == B[second] &amp;&amp;</span><br><span class="line">                    A[second] == B[first]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>盛最多水的容器</title>
    <url>/2018/08/container-with-most-water.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定 n 个非负整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_{1}, a_{2}, ..., a_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，每个数代表坐标中的一个点 (i, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>

</blockquote>
<span id="more"></span>
<p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。<br />
<img data-src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="enter image description here" /><br />
图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<h5 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxarea = <span class="number">0</span>, l = <span class="number">0</span>, r = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            maxarea = <span class="built_in">max</span>(maxarea, <span class="built_in">min</span>(height[l], height[r]) * (r - l));</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r])</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>公平的糖果交换</title>
    <url>/2018/08/fair-candy-swap.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爱丽丝和鲍勃有不同大小的糖果棒：A[i] 是爱丽丝拥有的第 i 块糖的大小，B[j] 是鲍勃拥有的第 j 块糖的大小。</span><br><span class="line"></span><br><span class="line">因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）</span><br><span class="line"></span><br><span class="line">返回一个整数数组 ans，其中 ans[0] 是爱丽丝必须交换的糖果棒的大小，ans[1] 是 Bob 必须交换的糖果棒的大小。</span><br><span class="line"></span><br><span class="line">如果有多个答案，你可以返回其中任何一个。保证答案存在。</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：A = [1,1], B = [2,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：A = [1,2], B = [2,3]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：A = [2], B = [1,3]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure>
<h5 id="示例-4"><a class="markdownIt-Anchor" href="#示例-4"></a> 示例 4：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：A = [1,2,5], B = [2,4]</span><br><span class="line">输出：[5,4]</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">fairCandySwap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; A, vector&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">int</span> sumA = <span class="number">0</span>, sumB = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算各自糖果数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a: A) sumA += a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b: B) sumB += b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = A[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = B[j];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> tmpA = sumA - x + y;</span><br><span class="line">                <span class="keyword">int</span> tmpB = sumB - y + x;</span><br><span class="line">                <span class="keyword">if</span> (tmpA == tmpB) &#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(y);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>括号生成</title>
    <url>/2018/08/generate-prentheses.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>

</blockquote>
<span id="more"></span>
<p>例如，给出 n = 3，生成结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">                <span class="keyword">for</span> (string right: <span class="built_in">generateParenthesis</span>(c))</span><br><span class="line">                    <span class="keyword">for</span> (string left: <span class="built_in">generateParenthesis</span>(n<span class="number">-1</span>-c))</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(<span class="string">&quot;(&quot;</span> + left + <span class="string">&quot;)&quot;</span> + right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux 高性能服务器编程】 TCP/IP 协议详解</title>
    <url>/2018/08/high-performance-linux-server-programming-1.html</url>
    <content><![CDATA[<ul>
<li>TCP/IP 协议族</li>
<li>IP 协议详解</li>
<li>TCP 协议详解</li>
</ul>
<span id="more"></span>
<h4 id="tcpip-协议族"><a class="markdownIt-Anchor" href="#tcpip-协议族"></a> TCP/IP 协议族</h4>
<h5 id="tcpip-体系结构"><a class="markdownIt-Anchor" href="#tcpip-体系结构"></a> TCP/IP 体系结构</h5>
<ul>
<li>数据链路层（ARP、RARP）：实现了网卡接口的网络驱动程序，以处理数据在物理媒介上的传输。</li>
<li>网络层（IP、ICMP）：实现数据包的选路和转发。</li>
<li>传输层（TCP、UDP、SCTP）： 为两台主机上的应用程序提供端到端的通信。</li>
<li>应用层（telnet、OSPF、DNS）：处理应用程序的逻辑。</li>
</ul>
<h5 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h5>
<p>通过<code>封装</code>实现上层协议使用下层协议提供的服务。</p>
<h5 id="分用"><a class="markdownIt-Anchor" href="#分用"></a> 分用</h5>
<p>各层协议各司其职，处理传输过来的帧，再交给目标应用程序。</p>
<h4 id="ip-协议详解"><a class="markdownIt-Anchor" href="#ip-协议详解"></a> IP 协议详解</h4>
<ul>
<li>IP 协议是TCP/IP 协议族的动力，它为上层协议提供无状态、无连接、不可靠的服务。</li>
</ul>
<h4 id="tcp-协议详解"><a class="markdownIt-Anchor" href="#tcp-协议详解"></a> TCP 协议详解</h4>
<p>与 IP 协议相比，TCP 协议更靠近应用层，因此在应用程序中具有更强的可操作性。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux 高性能服务器编程】 系统监测工具</title>
    <url>/2018/08/high-performance-linux-server-programming-2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Linux 提供了很多有用的工具， 以方便开发人员调试和测评服务器程序。</p>

</blockquote>
<span id="more"></span>
<ul>
<li>tcpdump: 一款经典的网络抓包工具。</li>
<li>lsof: 一个列出当前系统打开的文件描述符的工具。</li>
<li>nc: 主要被用来快速构建网络连接。</li>
<li>strace: 测试服务器性能。它跟踪程序运行过程中执行的系统调用和接收到的信号，并将系统调用名、参数、返回值及信号名输出到标准输出或者指定的文件。</li>
<li>netstat: 一个功能强大的网络信息统计工具。它可以打印本地网上接口上的全部连接、路由表信息、网卡接口信息等。</li>
<li>vmstat: 实时输出系统的各种资源的使用情况。</li>
<li>ifstat: 简单的网络流量监测工具。</li>
<li>mpstat: 实时监测多处理器系统上的每个 CPU 的使用情况。</li>
</ul>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何工作</title>
    <url>/2019/10/how-to-work.html</url>
    <content><![CDATA[<ul>
<li>任务到手先思考</li>
<li>开始之前先规划</li>
<li>复杂问题先解耦</li>
<li>团队协作先约定</li>
<li>任务完成先自检</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>经验之谈</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP缓存</title>
    <url>/2018/07/http-cache.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>HTTP缓存机制</p>

</blockquote>
<span id="more"></span>
<h3 id="缓存规则"><a class="markdownIt-Anchor" href="#缓存规则"></a> 缓存规则</h3>
<ul>
<li><code>强制缓存</code> 只有在缓存不存在时，才会与服务器产生交互</li>
<li><code>对比缓存</code> 无论缓存存在与否，都会与服务器产生交互</li>
</ul>
<blockquote>
<ul>
<li><strong>强制缓存优先级高于对比缓存</strong></li>
<li><strong>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。</strong></li>
<li><strong>对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>接口就是大纲</title>
    <url>/2018/07/interface-as-schematic.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Interfaces are helpful for developing a “skeleton” of defined functionality provided by your application. Use them during the design phase of a component to facilicate design discussion amongst your team. For example, define a BillingNotifierInterface and discuss its methods with your team. Use the interface to agree on a good API before you actually write any implementation code!</p>
<p>接口在开发程序的“骨架”时非常有用。 在设计组件时，使用接口进行设计和讨论都是对你的团队有益处的。比如定义一个BillingNotifierInterface然后讨论他有什么方法。在写任何实现代码前先用接口讨论好一套好的API！<br />
– 「<a href="https://my.oschina.net/zgldh/blog/389246">从百草园到三味书屋 “From Apprentice To Artisan”</a>」</p>

</blockquote>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>在Jupyter Notebook中使用pip</title>
    <url>/2018/07/jupyter-use-pip.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>在Jupyter Notebook中使用 pip 安装 python 包 <code>!pip install &lt;package&gt;</code><br />
以此类推，在 Jupyter Notebook中使用命令行即在命令前加上<code>!</code>即可</p>

</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>最长的斐波那契子序列的长度</title>
    <url>/2018/08/length-of-longest-fibonacci-subsequence.html</url>
    <content><![CDATA[<p>如果序列 X_1, X_2, …, X_n 满足下列条件，就说它是 斐波那契式 的：</p>
<ul>
<li>n &gt;= 3</li>
<li>对于所有 i + 2 &lt;= n，都有 X_i + X_{i+1} = X_{i+2}<br />
给定一个严格递增的正整数数组形成序列，找到 A 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。</li>
</ul>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4,5,6,7,8]</span><br><span class="line">输出: 5</span><br><span class="line">解释:</span><br><span class="line">最长的斐波那契式子序列为：[1,2,3,5,8] 。</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [1,3,7,11,12,14,18]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">最长的斐波那契式子序列有：</span><br><span class="line">[1,11,12]，[3,11,14] 以及 [7,11,18] 。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lenLongestFibSubseq</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = A.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; index;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            index[A[i]] = i;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; longest;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[k] - A[j] &lt; A[j] &amp;&amp; index.<span class="built_in">count</span>(A[k] - A[j])) &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = index[A[k] - A[j]];</span><br><span class="line">                    longest[j * N + k] = longest[i * N + j] + <span class="number">1</span>;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, longest[j * N + k] + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans &gt;= <span class="number">3</span> ? ans : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>最长回文子串</title>
    <url>/2018/07/longest-palindromic-substring.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot;也是一个有效答案。</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = <span class="built_in">expandAroundCenter</span>(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = <span class="built_in">expandAroundCenter</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">max</span>(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(string s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.<span class="built_in">length</span>() &amp;&amp; s[L] == s[R]) &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>无重复字符的最长子串</title>
    <url>/2018/07/longest-substring-without-repeating-characters.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。</span><br><span class="line"></span><br><span class="line">给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。</span><br><span class="line"></span><br><span class="line">给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dict</span><span class="params">(<span class="number">256</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, start = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            start = <span class="built_in">max</span>(dict[s[i]], start); <span class="comment">// 有重复则重置起点</span></span><br><span class="line">            dict[s[i]] = i;</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, i - start);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>两个排序数组的中位数</title>
    <url>/2018/07/median-of-two-sorted-arrays.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。</p>
<p>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">中位数是 2.0</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; temp = nums1; nums1 = nums2; nums2 = temp;</span><br><span class="line">            <span class="keyword">int</span> tmp = m; m = n; n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>, iMax = m, halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (iMin &lt;= iMax) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = halfLen - i;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; iMax &amp;&amp; nums2[j<span class="number">-1</span>] &gt; nums1[i])&#123;</span><br><span class="line">                iMin = iMin + <span class="number">1</span>; <span class="comment">// i is too small</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; iMin &amp;&amp; nums1[i<span class="number">-1</span>] &gt; nums2[j]) &#123;</span><br><span class="line">                iMax = iMax - <span class="number">1</span>; <span class="comment">// i is too big</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// i is perfect</span></span><br><span class="line">                <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; maxLeft = nums2[j<span class="number">-1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; maxLeft = nums1[i<span class="number">-1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; maxLeft = <span class="built_in">max</span>(nums1[i<span class="number">-1</span>], nums2[j<span class="number">-1</span>]); &#125;</span><br><span class="line">                <span class="keyword">if</span> ( (m + n) % <span class="number">2</span> == <span class="number">1</span> ) &#123; <span class="keyword">return</span> maxLeft; &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == m) &#123; minRight = nums2[j]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123; minRight = nums1[i]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; minRight = <span class="built_in">min</span>(nums2[j], nums1[i]); &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>长度最小的子数组</title>
    <url>/2018/08/minimum-size-subarray-sum.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, sum = <span class="number">0</span>, min = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            sum += nums[j++];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                min = (min &lt; j - i) ? min : (j - i);</span><br><span class="line">                sum -= nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> min == INT_MAX ? <span class="number">0</span> : min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 多语言站点</title>
    <url>/2018/06/multilang-site.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Laravel 开发多语言站点</p>

</blockquote>
<span id="more"></span>
<h3 id="目的"><a class="markdownIt-Anchor" href="#目的"></a> 目的</h3>
<p>实现多语言站点的开发，用户根据访问 <code>/en</code>、<code>/zh-CN</code> 等浏览不同语言的站点。</p>
<h3 id="开发工具"><a class="markdownIt-Anchor" href="#开发工具"></a> 开发工具</h3>
<ul>
<li><code>Laravel</code> 5.5.* <a href="https://laravel.com/docs/5.5">URL</a></li>
<li><code>dimsav/laravel-translatable</code> 8.* <a href="https://github.com/dimsav/laravel-translatable">URL</a></li>
</ul>
<p>安装完成上述工具后，进行开发。</p>
<h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3>
<h4 id="修改-translatablephp-配置文件"><a class="markdownIt-Anchor" href="#修改-translatablephp-配置文件"></a> 修改 <code>translatable.php</code> 配置文件</h4>
<p>在 <code>translatable.php</code> 文件 <code>locales</code> 中修改站点语言：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;locales&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="修改-routeserviceproviderphp-文件"><a class="markdownIt-Anchor" href="#修改-routeserviceproviderphp-文件"></a> 修改 <code>RouteServiceProvider.php</code> 文件</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$locale</span> = <span class="variable">$request</span>-&gt;segment(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;setLocale(<span class="variable">$locale</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapApiRoutes();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapWebRoutes(<span class="variable">$locale</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapWebRoutes</span>(<span class="params"><span class="variable">$locale</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$locale</span>, <span class="keyword">$this</span>-&gt;app-&gt;config-&gt;get(<span class="string">&#x27;translatable.locales&#x27;</span>))) &#123;</span><br><span class="line">        Route::group([</span><br><span class="line">            <span class="string">&#x27;middleware&#x27;</span> =&gt; <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="variable">$locale</span>,</span><br><span class="line">            <span class="string">&#x27;namespace&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;namespace,</span><br><span class="line">        ], <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$router</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">require</span> base_path(<span class="string">&#x27;routes/web.php&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Route::group([</span><br><span class="line">            <span class="string">&#x27;middleware&#x27;</span> =&gt; <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;namespace&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;namespace,</span><br><span class="line">        ], <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$router</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">require</span> base_path(<span class="string">&#x27;routes/web.php&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加语言翻译包"><a class="markdownIt-Anchor" href="#添加语言翻译包"></a> 添加语言翻译包</h4>
<p>对于我们站点里的静态内容，我们可以通过在 <code>resources/lang</code> 下面添加指定语言包，使用 <code>trans('指定名称')</code> 来进行翻译，详情请见 <a href="https://laravel.com/docs/5.5/localization">文档</a></p>
<p>至此，我们可以通过访问 <code>/en</code>、<code>/zh-CN</code> 浏览指定语言的站点了。但是，我们应该发现，对于我们在数据库里读取的数据并没有发生改变</p>
<h4 id="创建模型及迁移"><a class="markdownIt-Anchor" href="#创建模型及迁移"></a> 创建模型及迁移</h4>
<p>现在是 <code>dimsav/laravel-translatable</code> 包大展身手的时候了</p>
<h5 id="模型"><a class="markdownIt-Anchor" href="#模型"></a> 模型</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Article 模型</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dimsav</span>\<span class="title">Translatable</span>\<span class="title">Translatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Translatable</span>; <span class="comment">// 引入 Translatable Trait(前提安装dimsav/laravel-translatable)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$translatedAttributes</span> = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;text&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$guarded</span> = [<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArticleTranslation 模型</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleTranslation</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$guarded</span> = [<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>NOTE:</em> 其中 <code>$translatedAttributes</code> 设置要翻译的字段</p>
<h5 id="迁移"><a class="markdownIt-Anchor" href="#迁移"></a> 迁移</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Schema::create(<span class="string">&#x27;articles&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;boolean(<span class="string">&#x27;online&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Schema::create(<span class="string">&#x27;article_translations&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;article_id&#x27;</span>)-&gt;unsigned();</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;locale&#x27;</span>)-&gt;index();</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;unique([<span class="string">&#x27;article_id&#x27;</span>,<span class="string">&#x27;locale&#x27;</span>]);</span><br><span class="line">    <span class="variable">$table</span>-&gt;foreign(<span class="string">&#x27;article_id&#x27;</span>)-&gt;references(<span class="string">&#x27;id&#x27;</span>)-&gt;on(<span class="string">&#x27;articles&#x27;</span>)-&gt;onDelete(<span class="string">&#x27;cascade&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><em>NOTE:</em> 其中 <code>*_translations</code> 表中必须包含对应表的关联 ID <code>*_id</code>、区域标识 <code>locale</code>及要翻译的字段等</p>
<h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4>
<p>在每次创建模型记录时，使用模型的 <code>translateOrNew()</code> 方法添加翻译内容，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$article</span>-&gt;translateOrNew(<span class="string">&#x27;zh-CN&#x27;</span>)-&gt;name = <span class="string">&quot;中文&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>在每次读取模型数据时，直接读取就可以了，其他工作 <code>dimsav/laravel-translatable</code> 包已经做了。</p>
<hr />
<h4 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h4>
<ul>
<li><a href="https://laravel.com/docs/5.5/">Laravel5.5 官方文档</a></li>
<li><a href="https://laravel-china.org/topics/5109/53-configuration-for-multilingual-sites">5.3 关于多语言站点的配置</a></li>
<li><a href="https://laravel-china.org/articles/4194/how-to-add-multi-language-support-for-eloquent">如何为 Eloquent 添加多语言支持</a></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数</title>
    <url>/2018/08/palindrome-number.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<h5 id="进阶"><a class="markdownIt-Anchor" href="#进阶"></a> 进阶:</h5>
<p>你能不将整数转为字符串来解决这个问题吗？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 排除小于0或能被10整除且不为0的数</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>整数</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式匹配</title>
    <url>/2018/08/regular-expression-matching.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个字符串 (s) 和一个字符模式 §。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>

</blockquote>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;.&#x27; 匹配任意单个字符。</span><br><span class="line">&#x27;*&#x27; 匹配零个或多个前面的元素。</span><br></pre></td></tr></table></figure>
<p>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</p>
<h5 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明:</h5>
<ul>
<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li>
<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code>。</li>
</ul>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &#x27;*&#x27; 代表可匹配零个或多个前面的元素, 即可以匹配 &#x27;a&#x27; 。因此, 重复 &#x27;a&#x27; 一次, 字符串可变为 &quot;aa&quot;。</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;ab&quot;</span><br><span class="line">p = &quot;.*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &quot;.*&quot; 表示可匹配零个或多个(&#x27;*&#x27;)任意字符(&#x27;.&#x27;)。</span><br></pre></td></tr></table></figure>
<h5 id="示例-4"><a class="markdownIt-Anchor" href="#示例-4"></a> 示例 4:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &#x27;c&#x27; 可以不被重复, &#x27;a&#x27; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure>
<h5 id="示例-5"><a class="markdownIt-Anchor" href="#示例-5"></a> 示例 5:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;mississippi&quot;</span><br><span class="line">p = &quot;mis*is*p*.&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slen = s.<span class="built_in">size</span>(), plen = p.<span class="built_in">size</span>();</span><br><span class="line">		vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">dp</span>(slen+<span class="number">1</span>, vector&lt;<span class="keyword">bool</span>&gt;(plen+<span class="number">1</span>));</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= slen; ++i)&#123;</span><br><span class="line">			dp[i][<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= plen; ++j)&#123;</span><br><span class="line">			dp[<span class="number">0</span>][j] = p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= slen; ++i)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= plen; ++j)&#123;</span><br><span class="line">				<span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">					dp[i][j] = dp[i][j - <span class="number">2</span>] ||</span><br><span class="line">                    (dp[i - <span class="number">1</span>][j] &amp;&amp; (p[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span> || p[j - <span class="number">2</span>] == s[i - <span class="number">1</span>]));</span><br><span class="line">				&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">					dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] &amp;&amp; (s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>] || <span class="string">&#x27;.&#x27;</span> == p[j<span class="number">-1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dp[slen][plen];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>删除排序数组中的重复项</title>
    <url>/2018/08/remove-duplicates-from-sorted-array.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>移除元素</title>
    <url>/2018/08/remove-element.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>反转整数</title>
    <url>/2018/07/reverse-integer.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; INT_MAX/<span class="number">10</span> || (res == INT_MAX / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (res &lt; INT_MIN/<span class="number">10</span> || (res == INT_MIN / <span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            res = pop + res * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>整数</tag>
      </tags>
  </entry>
  <entry>
    <title>SOLID原则</title>
    <url>/2017/11/solid.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>SOLID敏捷开发的五种原则。</p>

</blockquote>
<span id="more"></span>
<h4 id="单一职责"><a class="markdownIt-Anchor" href="#单一职责"></a> 单一职责</h4>
<blockquote>
<p>A Class should have only one reason to change.</p>
</blockquote>
<p>单一职责(SRP),意思是一个类应该只有一个发生变化的原因，即一个类应该只为一项业务而定义。</p>
<h4 id="开闭原则"><a class="markdownIt-Anchor" href="#开闭原则"></a> 开闭原则</h4>
<blockquote>
<p>Software entities (classes, modules, functions, etc) should be open for extension, but closed for modification.</p>
</blockquote>
<p>开闭原则(OCP),意思是当我们在设计一个类（模块或函数，等）时，应该使其可扩展，而不应该在其上作修改。</p>
<h4 id="里氏代换原则"><a class="markdownIt-Anchor" href="#里氏代换原则"></a> 里氏代换原则</h4>
<blockquote>
<p>Subtypes must be substitutable for their base types.</p>
</blockquote>
<p>里氏替换原则(LSP),意思是子类必须可替换其基类。</p>
<h4 id="接口隔离原则"><a class="markdownIt-Anchor" href="#接口隔离原则"></a> 接口隔离原则</h4>
<blockquote>
<p>The interface-segregation principle(ISP) states that no client should be forced to depend on methods it does not use.</p>
</blockquote>
<p>接口隔离原则(ISP)代表着用户不需要依赖他不需要的接口。</p>
<h4 id="依赖倒转原则"><a class="markdownIt-Anchor" href="#依赖倒转原则"></a> 依赖倒转原则</h4>
<blockquote>
<p>A. High-level modules should not depend on low-level modules. Both should depend on abstractions.</p>
</blockquote>
<p>高级模块不应该依赖于低级模块； 它们都应该依赖于抽象。</p>
<blockquote>
<p>B. Abstractions should not depend upon details. Details should depend upon abstractions.</p>
</blockquote>
<p>抽象不应该取决于细节； 细节应该取决于抽象。</p>
<hr />
<p>参考自<a href="https://code.tutsplus.com/series/the-solid-principles--cms-634">《The SOLID Principles》</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串转整数</title>
    <url>/2018/07/string-to-integer.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现 atoi，将字符串转为整数。</span><br><span class="line"></span><br><span class="line">在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</span><br><span class="line"></span><br><span class="line">字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</span><br><span class="line"></span><br><span class="line">当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</span><br><span class="line"></span><br><span class="line">若函数不能执行有效的转换，返回 0。</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明：</h5>
<p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;42&quot;</span><br><span class="line">输出: 42</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;   -42&quot;</span><br><span class="line">输出: -42</span><br><span class="line">解释: 第一个非空白字符为 &#x27;-&#x27;, 它是一个负号。</span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></table></figure>
<h5 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;4193 with words&quot;</span><br><span class="line">输出: 4193</span><br><span class="line">解释: 转换截止于数字 &#x27;3&#x27; ，因为它的下一个字符不为数字。</span><br></pre></td></tr></table></figure>
<h5 id="示例-4"><a class="markdownIt-Anchor" href="#示例-4"></a> 示例 4:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;words and 987&quot;</span><br><span class="line">输出: 0</span><br><span class="line">解释: 第一个非空字符是 &#x27;w&#x27;, 但它不是数字或正、负号。</span><br><span class="line">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure>
<h5 id="示例-5"><a class="markdownIt-Anchor" href="#示例-5"></a> 示例 5:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;-91283472332&quot;</span><br><span class="line">输出: -2147483648</span><br><span class="line">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 无效情况</span></span><br><span class="line">        <span class="keyword">if</span> (str.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 排除前缀空字符</span></span><br><span class="line">        <span class="keyword">while</span> (str[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;-&#x27;</span> || str[i] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            sign = str[i++] == <span class="string">&#x27;-&#x27;</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; str.<span class="built_in">size</span>() &amp;&amp; str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 溢出情况</span></span><br><span class="line">            <span class="keyword">if</span> (res &gt; INT_MAX / <span class="number">10</span> || (res == INT_MAX / <span class="number">10</span> &amp;&amp; str[i] - <span class="string">&#x27;0&#x27;</span> &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (sign == <span class="number">1</span>) ? INT_MAX : INT_MIN;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            res = <span class="number">10</span> * res + (str[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>整数</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Swoft —— 安装</title>
    <url>/2018/03/swoft-installation.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<blockquote>
<p>Swoft 是首个基于 Swoole 原生协程的新时代 PHP 高性能协程全栈框架，内置协程网络服务器及常用的协程客户端，常驻内存，不依赖传统的 PHP-FPM，全异步非阻塞 IO 实现，以类似于同步客户端的写法实现异步客户端的使用，没有复杂的异步回调，没有繁琐的 yield, 有类似 Go 语言的协程、灵活的注解、强大的全局依赖注入容器、完善的服务治理、灵活强大的 AOP、标准的 PSR 规范实现等等，可以用于构建高性能的Web系统、API、中间件、基础服务等等。 —— <a href="https://doc.swoft.org/">Swoft 官方文档</a></p>
</blockquote>

</blockquote>
<span id="more"></span>
<p>最近看到这个新框架，尝试安装玩儿一下，发现这个框架是我见过的安装最简易的框架了（请恕我见识短浅）。当然，这要感谢 Swoft 贡献者大牛们的付出。下面我来说一下 Swoft 的安装步骤吧。</p>
<h4 id="安装前提"><a class="markdownIt-Anchor" href="#安装前提"></a> 安装前提</h4>
<p>在安装之前，请在电脑上安装上 Docker，因为我在这里讲的是 Docker 安装方式，具体安装方法请查阅 <a href="https://docs.docker.com/">Docker官方文档</a>。其次，你的电脑上必须安装了 composer，  具体安装方法请查阅 <a href="http://docs.phpcomposer.com/00-intro.html">composer 入门指南</a></p>
<h4 id="开始安装"><a class="markdownIt-Anchor" href="#开始安装"></a> 开始安装</h4>
<p>下面我讲两种安装方式， 一种是 composer 安装，另一种是手动安装。</p>
<h5 id="composer-方式"><a class="markdownIt-Anchor" href="#composer-方式"></a> Composer 方式</h5>
<p>在终端执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project swoft/swoft swoft</span><br></pre></td></tr></table></figure>
<h4 id="手动安装方式"><a class="markdownIt-Anchor" href="#手动安装方式"></a> 手动安装方式</h4>
<p>首先，你要获取项目包。在这里只写 git clone 方式获取包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/swoft-cloud/swoft.git</span><br></pre></td></tr></table></figure>
<p>然后，复制 .env.example 为 .env 编辑参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure>
<p>最后， 安装依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure>
<h4 id="部署开发环境"><a class="markdownIt-Anchor" href="#部署开发环境"></a> 部署开发环境</h4>
<p>Swoft 开发者们已经为我们准备好了 swoft 的 Docker 镜像，以及在项目包里 Dockerfile 和 docker-compose.yml 文件。</p>
<h5 id="docker-方式"><a class="markdownIt-Anchor" href="#docker-方式"></a> Docker 方式</h5>
<h6 id="使用官方镜像"><a class="markdownIt-Anchor" href="#使用官方镜像"></a> 使用官方镜像</h6>
<p>如果官方镜像已经满足了你的开发需求，直接使用官方镜像是个不错的选择。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -name swoft swoft/swoft</span><br></pre></td></tr></table></figure>
<h6 id="自定义镜像"><a class="markdownIt-Anchor" href="#自定义镜像"></a> 自定义镜像</h6>
<p>如果你感觉官方镜像不能满足你的需求，可以根据自己的需求通过修改 Dockerfile 文件来自定义镜像。修改完 Dockerfile 文件后，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t swoft/swoft .</span><br><span class="line">docker run -d -p 80:80 --name swoft swoft/swoft</span><br></pre></td></tr></table></figure>
<h6 id="其他命令"><a class="markdownIt-Anchor" href="#其他命令"></a> 其他命令</h6>
<p>前面已经使用 <code>--name</code> 选项将容器命名为 <code>swoft</code> 了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 进入工作台</span><br><span class="line">docker <span class="built_in">exec</span> -it swoft bash</span><br><span class="line"></span><br><span class="line">// 停止容器运行</span><br><span class="line">docker stop swoft</span><br></pre></td></tr></table></figure>
<h5 id="docker-compose-方式"><a class="markdownIt-Anchor" href="#docker-compose-方式"></a> Docker-Compose 方式</h5>
<ul>
<li>运行 <code>docker-compose up -d swoft</code> 即可运行容器；</li>
<li>运行 <code>docker-compose exec swoft</code> 进入工作台；</li>
<li>运行 <code>docker-compose stop swoft</code> 停止容器；</li>
</ul>
<p>更多 Docker 相关命令请查阅 <a href="https://docs.docker.com/">Docker官方文档</a></p>
<h4 id="运行-swoft"><a class="markdownIt-Anchor" href="#运行-swoft"></a> 运行 Swoft</h4>
<p>安装完成后，我们就要检查一下 Swoft 是否能够成功运行。 Docker 镜像中已经包含执行了 <code>php bin/swoft start</code> 命令，因此我们无需操作。<br />
如果你采用其他方式部署安装，请记得执行此命令。<br />
在这里，我们直接访问 <a href="http://localhost">http://localhost</a> ，出现 Swoft 字样的页面即代表我们安装成功！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Swoole</tag>
        <tag>Swoft</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>The Descent</title>
    <url>/2018/07/the-descent.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Destroy the mountains before your starship collides with one of them. For that, shoot the highest mountain on your path.</p>

</blockquote>
<span id="more"></span>
<h3 id="rules"><a class="markdownIt-Anchor" href="#rules"></a> Rules</h3>
<p>At the start of each game turn, you are given the height of the 8 mountains from left to right.<br />
By the end of the game turn, you must fire on the highest mountain by outputting its index (from 0 to 7).</p>
<p>Firing on a mountain will only destroy part of it, reducing its height. Your ship descends after each pass.</p>
<h3 id="game-input"><a class="markdownIt-Anchor" href="#game-input"></a> Game Input</h3>
<p>Within an infinite loop, read the heights of the mountains from the standard input and print to the standard output the index of the mountain to shoot.</p>
<h3 id="input-for-one-game-turn"><a class="markdownIt-Anchor" href="#input-for-one-game-turn"></a> Input for one game turn</h3>
<p>8 lines: one integer mountainH per line. Each represents the height of one mountain given in the order of their index (from 0 to 7).<br />
Output for one game turn<br />
A single line with one integer for the index of which mountain to shoot.</p>
<h3 id="constraints"><a class="markdownIt-Anchor" href="#constraints"></a> Constraints</h3>
<p>0 ≤ mountainH ≤ 9<br />
Response time per turn ≤ 100ms</p>
<h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># The while loop represents the game.</span></span><br><span class="line"><span class="comment"># Each iteration represents a turn of the game</span></span><br><span class="line"><span class="comment"># where you are given inputs (the heights of the mountains)</span></span><br><span class="line"><span class="comment"># and where you have to print an output (the index of the mountain to fire on)</span></span><br><span class="line"><span class="comment"># The inputs you are given are automatically updated according to your last actions.</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="comment"># game loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    max_h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        mountain_h = <span class="built_in">int</span>(<span class="built_in">input</span>())  <span class="comment"># represents the height of one mountain.</span></span><br><span class="line">        <span class="keyword">if</span> mountain_h &gt; max_h:</span><br><span class="line">            max_h = mountain_h</span><br><span class="line">            flag = i</span><br><span class="line">    <span class="comment"># Write an action using print</span></span><br><span class="line">    <span class="comment"># To debug: print(&quot;Debug messages...&quot;, file=sys.stderr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The index of the mountain to fire on.</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CodinGame</category>
      </categories>
      <tags>
        <tag>最大数</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-ci自动集成Hexo个人博客</title>
    <url>/2017/09/travis-ci.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>自动化部署静态博客</p>

</blockquote>
<span id="more"></span>
<p>第一步， 在Github上新建一个仓库，用作存放博客；内设两个分支， 一个存放部署后即在网页中显示的内容， 另一个则存放部署前即Hexo源码内容。</p>
<p>第二步， 本地初始化Hexo项目，并将其初始化为git项目；在项目目录下新建<code>.travis.yml</code>文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;用户名&quot;</span><br><span class="line">  - git config user.email &quot;邮箱&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;update&quot;</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - hexo源码分支</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: 仓库地址</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第三步， 将本地项目推送到github仓库存放hexo源码的分支下。</p>
<p>第四步，在travis-ci官网部署仓库access-token(在github中 <code>setting - Devloper settings - Personal access tokens</code> 下获取), 大功告成！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2018/06/two-sum.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p>
<p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>

</blockquote>
<span id="more"></span>
<h5 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapping;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> gap = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (mapping.<span class="built_in">find</span>(gap) != mapping.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                result.<span class="built_in">push_back</span>(mapping[gap]);</span><br><span class="line">                result.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            mapping[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode 终端中文乱码解决办法</title>
    <url>/2018/12/vscode-terminal-chinese-garbled.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>最近换了 Debian 9 的系统，重新部署了一下开发环境。在安装完 VsCode 之后，发现在终端里输出中文文件名时出现一堆 ??? 。</p>

</blockquote>
<span id="more"></span>
<h3 id="原因分析"><a class="markdownIt-Anchor" href="#原因分析"></a> 原因分析</h3>
<p>不能正确输出你想要的文字时，一是可能你写错了，二是计算机不认识。所以如果能保证自己没写错，那就是计算机不认识你写的东西了，也就是说编码或者相关语言配置不对了。</p>
<h3 id="问题解决"><a class="markdownIt-Anchor" href="#问题解决"></a> 问题解决</h3>
<p>既然知道了大概的原因了，那就看一下目前在 VsCode 终端里是使用的什么语言和编码吧。<br />
使用 <code>locale</code> 命令 或者 <code>echo</code> 输出一下要查看的环境变量。<br />
<br><br />
我这里用的是 <code>locale</code> 命令查看全部的语言环境设置，发现设置的值是 <code>en_US.UTF-8</code>，编码没问题，但是语言却是英语（美国）而不是中文（简体）。<br />
<br><br />
使用 <code>LANG=&quot;zh_CN.UTF-8</code> 临时设置一下环境变量， 重新输出一下中文文件名，发现输出正常了。<br />
<br><br />
找到解决办法了，但是这是一种临时生效的方法，怎样才能让它长期生效呢？<br />
<br><br />
VsCode 配置文件里有一个配置项 <code>terminal.integrated.env.*</code> 可以添加环境变量到 VsCode 进程中, 因为我是 <code>linux</code> 系统，所以在配置文件 <code>setting.json</code> 中使用 <code>terminal.integrated.env.linux</code> 来配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;terminal.integrated.env.linux&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;LC_ALL&quot;</span>: <span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置后保存，重启 VsCode 终端， 生效。</p>
<h3 id="举一反三"><a class="markdownIt-Anchor" href="#举一反三"></a> 举一反三</h3>
<p>如果在使用 linux 的时候发现内置终端的中文乱码，也是可以采用这种方法来解决的，修改 <code>.bashrc</code> 文件可以长期修改环境变量。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Z字形变换</title>
    <url>/2018/07/zigzag-conversion.html</url>
    <content><![CDATA[<p>将字符串 “PAYPALISHIRING” 以Z字形排列成给定的行数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>之后从左往右，逐行读取字符：“PAHNAPLSIIGYIR”</p>
<p>实现一个将字符串进行指定行数变换的函数:<br />
<code>string convert(string s, int numRows);</code></p>
<span id="more"></span>
<h5 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出: &quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释:</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span> || numRows == <span class="number">0</span> || numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">int</span> cycleLen = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; len; j += cycleLen) &#123;</span><br><span class="line">                res += s[j + i];</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + cycleLen - i &lt; len)</span><br><span class="line">                    res += s[j + cycleLen - i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
